//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Sources.Components.GridIndexComponent gridIndex { get { return (Sources.Components.GridIndexComponent)GetComponent(GameComponentsLookup.GridIndex); } }
    public bool hasGridIndex { get { return HasComponent(GameComponentsLookup.GridIndex); } }

    public void AddGridIndex(int newX, int newY) {
        var index = GameComponentsLookup.GridIndex;
        var component = (Sources.Components.GridIndexComponent)CreateComponent(index, typeof(Sources.Components.GridIndexComponent));
        component.X = newX;
        component.Y = newY;
        AddComponent(index, component);
    }

    public void ReplaceGridIndex(int newX, int newY) {
        var index = GameComponentsLookup.GridIndex;
        var component = (Sources.Components.GridIndexComponent)CreateComponent(index, typeof(Sources.Components.GridIndexComponent));
        component.X = newX;
        component.Y = newY;
        ReplaceComponent(index, component);
    }

    public void RemoveGridIndex() {
        RemoveComponent(GameComponentsLookup.GridIndex);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGridIndex;

    public static Entitas.IMatcher<GameEntity> GridIndex {
        get {
            if (_matcherGridIndex == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GridIndex);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGridIndex = matcher;
            }

            return _matcherGridIndex;
        }
    }
}
